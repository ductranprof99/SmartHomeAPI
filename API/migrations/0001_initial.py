# Generated by Django 3.0.5 on 2021-05-23 15:05

import API.models
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import djongo.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, primary_key=True, serialize=False)),
                ('device_id', models.CharField(max_length=24)),
                ('phone_number', models.CharField(max_length=30)),
                ('device_name', models.CharField(max_length=30)),
                ('feed_name', models.CharField(max_length=30)),
                ('description', models.CharField(blank=True, max_length=50, null=True)),
                ('device_type', models.CharField(max_length=30)),
                ('current_status', models.CharField(max_length=30)),
                ('unit', models.CharField(default='', max_length=30)),
                ('mode', models.IntegerField(validators=[django.core.validators.MaxValueValidator(3), django.core.validators.MinValueValidator(1)])),
                ('schedule', djongo.models.fields.ArrayField(blank=True, model_container=API.models.ScheduleNested, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(default='Need a string there', max_length=30)),
                ('time', models.CharField(max_length=30)),
                ('value', models.CharField(max_length=30)),
                ('mode', models.BooleanField()),
                ('unit', models.CharField(default='', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Home',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('home_name', models.CharField(max_length=30)),
                ('phone_number', models.CharField(default='required phone number', max_length=30, unique=True)),
                ('address', models.CharField(max_length=100)),
                ('devices', djongo.models.fields.ArrayField(blank=True, model_container=API.models.DeviceNested, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, primary_key=True, serialize=False)),
                ('schedule_id', models.CharField(max_length=24)),
                ('device_id', models.CharField(max_length=30)),
                ('time_on', models.CharField(blank=True, max_length=5, null=True)),
                ('time_off', models.CharField(blank=True, max_length=5, null=True)),
                ('is_repeat', models.BooleanField(null=True)),
                ('repeat_day', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('password', models.CharField(max_length=100)),
                ('phone_number', models.CharField(max_length=100, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
